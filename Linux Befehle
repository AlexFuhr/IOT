Make  	- 									Allrounder, mache etwas
Flash 	-									Scatch hochladen
term	- 									öffnet terminal Fenster(mache im Term.)
make BUILD_IN_DOCKER=1 term - 					holt notwendige daten
make all term -								startet das .c file in dem task-0x Ordner
make all term PORT=X -						Native Shell einem PORT zuweisen
BOARD=pba-d-01-kw2x BUILD_IN_DOCKER=1 make all flash term -				Write on Board example
 


ipconfig / (ip a):

if - Interface (Nummer zb. 4)
L2 Adress [bcast] 
Mac Dresse == Hardware Adresse



BOARDS INFO:
##########
Desktop/RIOT/examples/gnrc_networking$ make info-boards-supported | grep esp
##########
Board Name:
	-esp32-mh-et-live-minikit


Examle: 
	-BOARD=esp32-mh-et-live-minikit make all flash term
 	-BOARD=esp32-mh-et-live-minikit make BUILD_IN_DOCKER=1 all flash term

To start BME280 Sensort: /home/networker/Desktop/RIOT/tests/driver_bmx280/

Folder: /home/networker/Desktop/ESP32-MINI-KIT/Shield libraries/ESP32/examples/Timer/RepeatTimer/
	Desktop/RIOT/tests/driver_bmx280$ 
	
	BOARD=esp32-mh-et-live-minikit BUILD_IN_DOCKER=1 ESPTOOL=$(which esptool) make all flash term 

Dokumentation Adress:
	https://riot-os.org/api/group__boards__esp32__mh-et-live-minikit.html
	https://macsbug.wordpress.com/2017/07/10/esp32-minikit/
	/home/networker/Desktop/RIOT/drivers/bmx280/include/bmx280_params.h
	
	/home/networker/Desktop/RIOT2/tests/driver_bme280/	

Header Datas: 
	/home/networker/Desktop/RIOT2/drivers/include/saul.h
	/home/networker/Desktop/RIOT2/sys/include/phydat.h

PhyDat:
	/home/networker/Desktop/RIOT2/sys/phydat/

Useful links: 
	https://www.mikrocontroller.net/topic/159353


Next Steps: 
-WeMos D1 mini and this Battery Shield.
-Item #2871 / 3.3 V Step up Step Down Voltage


Anmerkungen an die Vorträge:
-Vorbereitung der Übergabe der Sensordaten über Soul-Interface - []
-Kommunikation mit anderer Gruppe   - []
-Daten an Display mit modularer Struktur (Name, Value) senden  - []
-Sensordaten Höchenmessung - []
-UDP communication ESP32 - []
-Muli hot mit routing tabellen - [] 
-Webapplication mit js (java script) APM-Package über CoAp Get Request  - []
-Webdesign mit Framework - []
-CoAP 1: > GET/POST Saul/dev {} - []
-CoAP 2: > GET/pressure (Favorit) - [] 
-CoAP 3: > Sensor name id in the header to choise one of Sensors - []
-Wlan / LowPan übersetzer als Raspberry pi (http nach CoAP Übersetzung notwendig) - []
-Netzwerkschicht ist die Ip aber 2 Verschiedene Linklayer(übertragungstechnologien) - []
-Moglicherweise Daten im Raspberry pi minütlich benutzen -[Lowpan packet eventuell Firewall Problem]


TO DO: 

	-PAD Einheit in Soul implementieren
	-Beschreibung hinzufügen
	-Mittelwerte aus 5 werten Bilden (Meridian) damit Ausreißer weck geschnitten werden
	-PhyDat benutzt 16 Bit
	-Zeit ermitteln
	-
	
	issue: 
	
	https://github.com/rosetree/riot-saul-coap/issues/16
	
	

Progress: 
1. Insert issue 'The air pressure value for the height measurement '  (https://github.com/rosetree/riot-saul-coap/issues/16)
2. UNIT_PAD,       /**< Pascal decimal */   (/home/networker/Desktop/RIOT2/sys/include/phydat.h)
3. case UNIT_PAD;	    return "Pa(dec)"   (/home/networker/Desktop/RIOT2/sys/phydat/phydat_str.c)
4. case -1:    return 'd';  (/home/networker/Desktop/RIOT2/sys/phydat/phydat_str.c)





